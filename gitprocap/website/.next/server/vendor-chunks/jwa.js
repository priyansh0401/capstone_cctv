"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jwa";
exports.ids = ["vendor-chunks/jwa"];
exports.modules = {

/***/ "(rsc)/./node_modules/jwa/index.js":
/*!***********************************!*\
  !*** ./node_modules/jwa/index.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar formatEcdsa = __webpack_require__(/*! ecdsa-sig-formatter */ \"(rsc)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar MSG_INVALID_ALGORITHM = '\"%s\" is not a valid algorithm.\\n  Supported algorithms are:\\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".';\nvar MSG_INVALID_SECRET = \"secret must be a string or buffer\";\nvar MSG_INVALID_VERIFIER_KEY = \"key must be a string or a buffer\";\nvar MSG_INVALID_SIGNER_KEY = \"key must be a string, a buffer or an object\";\nvar supportsKeyObjects = typeof crypto.createPublicKey === \"function\";\nif (supportsKeyObjects) {\n    MSG_INVALID_VERIFIER_KEY += \" or a KeyObject\";\n    MSG_INVALID_SECRET += \"or a KeyObject\";\n}\nfunction checkIsPublicKey(key) {\n    if (Buffer.isBuffer(key)) {\n        return;\n    }\n    if (typeof key === \"string\") {\n        return;\n    }\n    if (!supportsKeyObjects) {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key !== \"object\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key.type !== \"string\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key.asymmetricKeyType !== \"string\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n    if (typeof key.export !== \"function\") {\n        throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n}\n;\nfunction checkIsPrivateKey(key) {\n    if (Buffer.isBuffer(key)) {\n        return;\n    }\n    if (typeof key === \"string\") {\n        return;\n    }\n    if (typeof key === \"object\") {\n        return;\n    }\n    throw typeError(MSG_INVALID_SIGNER_KEY);\n}\n;\nfunction checkIsSecretKey(key) {\n    if (Buffer.isBuffer(key)) {\n        return;\n    }\n    if (typeof key === \"string\") {\n        return key;\n    }\n    if (!supportsKeyObjects) {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n    if (typeof key !== \"object\") {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n    if (key.type !== \"secret\") {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n    if (typeof key.export !== \"function\") {\n        throw typeError(MSG_INVALID_SECRET);\n    }\n}\nfunction fromBase64(base64) {\n    return base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    var padding = 4 - base64url.length % 4;\n    if (padding !== 4) {\n        for(var i = 0; i < padding; ++i){\n            base64url += \"=\";\n        }\n    }\n    return base64url.replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n}\nfunction typeError(template) {\n    var args = [].slice.call(arguments, 1);\n    var errMsg = util.format.bind(util, template).apply(null, args);\n    return new TypeError(errMsg);\n}\nfunction bufferOrString(obj) {\n    return Buffer.isBuffer(obj) || typeof obj === \"string\";\n}\nfunction normalizeInput(thing) {\n    if (!bufferOrString(thing)) thing = JSON.stringify(thing);\n    return thing;\n}\nfunction createHmacSigner(bits) {\n    return function sign(thing, secret) {\n        checkIsSecretKey(secret);\n        thing = normalizeInput(thing);\n        var hmac = crypto.createHmac(\"sha\" + bits, secret);\n        var sig = (hmac.update(thing), hmac.digest(\"base64\"));\n        return fromBase64(sig);\n    };\n}\nvar bufferEqual;\nvar timingSafeEqual = \"timingSafeEqual\" in crypto ? function timingSafeEqual(a, b) {\n    if (a.byteLength !== b.byteLength) {\n        return false;\n    }\n    return crypto.timingSafeEqual(a, b);\n} : function timingSafeEqual(a, b) {\n    if (!bufferEqual) {\n        bufferEqual = __webpack_require__(/*! buffer-equal-constant-time */ \"(rsc)/./node_modules/buffer-equal-constant-time/index.js\");\n    }\n    return bufferEqual(a, b);\n};\nfunction createHmacVerifier(bits) {\n    return function verify(thing, signature, secret) {\n        var computedSig = createHmacSigner(bits)(thing, secret);\n        return timingSafeEqual(Buffer.from(signature), Buffer.from(computedSig));\n    };\n}\nfunction createKeySigner(bits) {\n    return function sign(thing, privateKey) {\n        checkIsPrivateKey(privateKey);\n        thing = normalizeInput(thing);\n        // Even though we are specifying \"RSA\" here, this works with ECDSA\n        // keys as well.\n        var signer = crypto.createSign(\"RSA-SHA\" + bits);\n        var sig = (signer.update(thing), signer.sign(privateKey, \"base64\"));\n        return fromBase64(sig);\n    };\n}\nfunction createKeyVerifier(bits) {\n    return function verify(thing, signature, publicKey) {\n        checkIsPublicKey(publicKey);\n        thing = normalizeInput(thing);\n        signature = toBase64(signature);\n        var verifier = crypto.createVerify(\"RSA-SHA\" + bits);\n        verifier.update(thing);\n        return verifier.verify(publicKey, signature, \"base64\");\n    };\n}\nfunction createPSSKeySigner(bits) {\n    return function sign(thing, privateKey) {\n        checkIsPrivateKey(privateKey);\n        thing = normalizeInput(thing);\n        var signer = crypto.createSign(\"RSA-SHA\" + bits);\n        var sig = (signer.update(thing), signer.sign({\n            key: privateKey,\n            padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n            saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n        }, \"base64\"));\n        return fromBase64(sig);\n    };\n}\nfunction createPSSKeyVerifier(bits) {\n    return function verify(thing, signature, publicKey) {\n        checkIsPublicKey(publicKey);\n        thing = normalizeInput(thing);\n        signature = toBase64(signature);\n        var verifier = crypto.createVerify(\"RSA-SHA\" + bits);\n        verifier.update(thing);\n        return verifier.verify({\n            key: publicKey,\n            padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n            saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n        }, signature, \"base64\");\n    };\n}\nfunction createECDSASigner(bits) {\n    var inner = createKeySigner(bits);\n    return function sign() {\n        var signature = inner.apply(null, arguments);\n        signature = formatEcdsa.derToJose(signature, \"ES\" + bits);\n        return signature;\n    };\n}\nfunction createECDSAVerifer(bits) {\n    var inner = createKeyVerifier(bits);\n    return function verify(thing, signature, publicKey) {\n        signature = formatEcdsa.joseToDer(signature, \"ES\" + bits).toString(\"base64\");\n        var result = inner(thing, signature, publicKey);\n        return result;\n    };\n}\nfunction createNoneSigner() {\n    return function sign() {\n        return \"\";\n    };\n}\nfunction createNoneVerifier() {\n    return function verify(thing, signature) {\n        return signature === \"\";\n    };\n}\nmodule.exports = function jwa(algorithm) {\n    var signerFactories = {\n        hs: createHmacSigner,\n        rs: createKeySigner,\n        ps: createPSSKeySigner,\n        es: createECDSASigner,\n        none: createNoneSigner\n    };\n    var verifierFactories = {\n        hs: createHmacVerifier,\n        rs: createKeyVerifier,\n        ps: createPSSKeyVerifier,\n        es: createECDSAVerifer,\n        none: createNoneVerifier\n    };\n    var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);\n    if (!match) throw typeError(MSG_INVALID_ALGORITHM, algorithm);\n    var algo = (match[1] || match[3]).toLowerCase();\n    var bits = match[2];\n    return {\n        sign: signerFactories[algo](bits),\n        verify: verifierFactories[algo](bits)\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/jwa/index.js\n");

/***/ })

};
;